name: CI - Build and Test

on:
  push:
    branches: [ "main", "feature/*", "hotfix/*" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read       # Required to checkout code
  pages: write         # Required to publish to GitHub Pages
  id-token: write      # Required for OIDC authentication
  checks: write        # Required to publish test results
  pull-requests: write # Required to comment on PRs
  actions: read        # Required to read workflow runs

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: 1

jobs:

  # Job 1: Build non-WPF projects on Linux
  build:
    runs-on: windows-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for NBGV

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            10.0.x
            9.0.x
            8.0.x

      - name: Install workloads
        run: |
          dotnet workload install wasm-tools
          dotnet workload install android
          dotnet workload restore

      - name: Restore dependencies
        run: |
          dotnet restore

      - name: Build non-WPF projects
        run: |
          dotnet build --configuration Release --no-restore

      - name: Run tests with coverage
        run: |
          # Create results directory
          New-Item -ItemType Directory -Path "./TestResults" -Force

          # Run tests with coverage collection using Directory.Build.targets configuration
          dotnet test --no-build --configuration Release `
            --collect:"XPlat Code Coverage" `
            --settings .runsettings `
            --logger GitHubActions `
            --logger "trx" `
            --results-directory ./TestResults

          Write-Host "📋 Test results generated:"
          Get-ChildItem -Path "./TestResults" -Filter "*.trx" -Recurse | Select-Object -First 10 | ForEach-Object { Write-Host $_.FullName }
          Write-Host "📋 Coverage files from Directory.Build.targets:"
          $coverageFiles = Get-ChildItem -Path "./TestResults" -Filter "*.cobertura.xml" -Recurse -ErrorAction SilentlyContinue | Select-Object -First 10
          if ($coverageFiles) {
            $coverageFiles | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Host "No coverage files found yet"
          }

      - name: Publish Apps
        run: |
          Get-ChildItem -Path "src" -Filter "*.csproj" -Recurse | Where-Object { $_.BaseName -like "*.Wpf*" -or $_.BaseName -like "*.Console*" -or $_.BaseName -like "*.Avalonia*" }  | ForEach-Object {
            $projectName = $_.BaseName
            Write-Host "📦 Publishing: $projectName"
            
            dotnet publish "$($_.FullName)" --configuration Release --output "publish/$projectName"
          }

      - name: Generate coverage report
        uses: danielpalme/ReportGenerator-GitHub-Action@v5
        with:
          reports: 'TestResults/**/*.cobertura.xml'
          targetdir: 'coveragereport'
          reporttypes: 'HtmlInline_AzurePipelines;Cobertura;MarkdownSummaryGithub'

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: TestResults/**/*.cobertura.xml
          fail_ci_if_error: false
          verbose: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always() && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          files: TestResults/**/*.trx
          check_name: 'Test Results'
          comment_mode: changes
          fail_on: 'test failures'

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-linux
          path: coveragereport

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: apps
          path: publish/**

  # Job 4: Résumé des artifacts et build summary
  publish-artifacts-summary:
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifacts summary
        run: |
          echo "📦 All artifacts downloaded:"
          find artifacts -type f -o -name "*.exe" -o -name "*.dll" | head -20
          echo ""
          echo "📊 Artifacts summary:"
          echo "  Demo executables: $(find artifacts -name "**/*.exe" | wc -l)"
          echo "  Coverage reports: $(find artifacts -name "coverage-report-linux" -type d | wc -l)"

      - name: Display build summary
        run: |
          echo "## 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Projects | ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📦 Artifacts Generated:**" >> $GITHUB_STEP_SUMMARY
          echo "- Demo Executables: $(find artifacts -name "*.exe" | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Reports: Available" >> $GITHUB_STEP_SUMMARY
