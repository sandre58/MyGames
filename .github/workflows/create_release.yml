# Copyright (c) St√©phane ANDRE.
# Licensed under the MIT license.

# This continuous integration pipeline is triggered anytime a user pushes code to main branch.
# This pipeline create a release

name: Create Release for specific application

on:  
  push:
    tags:
    - '*-v*.*.*'
  workflow_dispatch:
    inputs:
      application:
        type: choice
        description: Name of application
        options: 
        - Connect4
      version: 
        description: New version of application. If empty, use version in .csproj.
      pre_release: 
        description: Label of pre-release (pre, alpha, beta, etc...)

jobs:

  # Compute parameters
  compute_parameters:
    runs-on: ubuntu-latest
    outputs:
      build_args: ${{ steps.get_parameters.outputs.build_args }}
      application: ${{ steps.get_application.outputs.application }}
      full_version: ${{ steps.get_parameters.outputs.full_version }}
      version: ${{ steps.get_parameters.outputs.version }}
      pre_release: ${{ steps.get_parameters.outputs.pre_release }}

    steps:
    
      # Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Find application name and version from tag
      - name: Get tag informations
        uses: olegtarasov/get-tag@v2.1.3 # https://github.com/marketplace/actions/get-tag-name
        id: get_tag
        with:
          tagRegex: (?<application>.*)-v(?<version>(\d|\.)*)(-(?<pre_release>.*))?

      # Return application name
      - name: Get Application name
        shell: pwsh
        id: get_application
        run: |
          if ('${{ steps.get_tag.outputs.application }}' -eq '') {
            echo "application=${{ inputs.application }}" >> $Env:GITHUB_OUTPUT
          } else {
            echo "application=${{ steps.get_tag.outputs.application }}" >> $Env:GITHUB_OUTPUT
          }

      # Find version from csproj
      - uses: bbonkr/get-version-action@v1
        id: get_version
        with:
          project: src/${{ steps.get_application.outputs.application }}/MyGames.steps.get_application.outputs.application.Wpf.csproj
          show_log_message: true

      # Return version
      - name: Define used version
        shell: pwsh
        id: get_parameters
        run: |
          if ('${{ steps.get_tag.outputs.version }}' -eq '') {
            if ('${{ inputs.version }}' -eq '') {
                echo "build_args=" >> $Env:GITHUB_OUTPUT
                echo "full_version=${{ steps.get_version.outputs.version }}" >> $Env:GITHUB_OUTPUT
                echo "version=${{ steps.get_version.outputs.major }}.${{ steps.get_version.outputs.minor }}.${{ steps.get_version.outputs.patch }}" >> $Env:GITHUB_OUTPUT
                echo "pre_release=${{ steps.get_version.outputs.pre-release }}" >> $Env:GITHUB_OUTPUT
            } else {
                if ('${{ inputs.pre_release }}' -eq '') {
                    echo "build_args=/p:Version=${{ inputs.version }}" >> $Env:GITHUB_OUTPUT
                    echo "full_version=${{ inputs.version }}" >> $Env:GITHUB_OUTPUT
                } else {
                    echo "build_args=/p:Version=${{ inputs.version }}-${{ inputs.pre_release }}" >> $Env:GITHUB_OUTPUT
                    echo "full_version=${{ inputs.version }}-${{ inputs.pre_release }}" >> $Env:GITHUB_OUTPUT
                }
                echo "version=${{ inputs.version }}" >> $Env:GITHUB_OUTPUT
                echo "pre_release=${{ inputs.pre_release }}" >> $Env:GITHUB_OUTPUT
            }
          } else {
            if ('${{ steps.get_tag.outputs.pre_release }}' -eq '') {
                    echo "build_args=/p:Version=${{ steps.get_tag.outputs.version}}" >> $Env:GITHUB_OUTPUT
                    echo "full_version=${{ steps.get_tag.outputs.version}}" >> $Env:GITHUB_OUTPUT
                } else {
                    echo "build_args=/p:Version=${{ steps.get_tag.outputs.version}}-${{ steps.get_tag.outputs.pre_release }}" >> $Env:GITHUB_OUTPUT
                    echo "full_version=${{ steps.get_tag.outputs.version}}-${{ steps.get_tag.outputs.pre_release }}" >> $Env:GITHUB_OUTPUT
                }
            echo "version=${{ steps.get_tag.outputs.version }}" >> $Env:GITHUB_OUTPUT
            echo "pre_release=${{ steps.get_tag.outputs.pre_release }}" >> $Env:GITHUB_OUTPUT
          }
  
  # Build project
  build:
    needs: [ compute_parameters ]
    uses: avantipoint/workflow-templates/.github/workflows/dotnet-build.yml@master # https://github.com/AvantiPoint/workflow-templates/blob/master/.github/workflows/dotnet-build.yml
    with:
      dotnet-test-logger: GitHubActions --no-build --no-restore
      build-args: ${{ needs.compute_parameters.outputs.build_args }}
      name: Build
      solution-path: .\src\${{ needs.compute_parameters.outputs.application }}\MyGames.${{ needs.compute_parameters.outputs.application }}.Wpf.csproj
      artifact-name: ${{ needs.compute_parameters.outputs.application }}
      artifacts-path: |
              ./build/${{ needs.compute_parameters.outputs.application }}/Release/**
              !./build/${{ needs.compute_parameters.outputs.application }}/Release/*.xml
              !./build/${{ needs.compute_parameters.outputs.application }}/Release/*.pdb
  
  # Create release
  release:
    runs-on: ubuntu-latest
    needs: [ compute_parameters, build ]
    env:
      DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_NOLOGO: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
    permissions:
      contents: write

    steps:
      
      # Checkout
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Update CHANGELOG with all conventional commit from previous tag
      - name: Update CHANGELOG
        continue-on-error: true
        id: changelog
        uses: requarks/changelog-action@v1.10.1 # https://github.com/marketplace/actions/changelog-from-conventional-commits
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}

      # Commit changes in CHANGELOG and skip CI
      - name: Commit CHANGELOG.md
        continue-on-error: true
        uses: stefanzweifel/git-auto-commit-action@v4 # https://github.com/marketplace/actions/git-auto-commit
        with:
          branch: main
          commit_message: 'docs: update CHANGELOG.md for ${{ github.ref_name }} [skip ci]'
          file_pattern: CHANGELOG.md

      # Download artifacts
      - uses: actions/download-artifact@v3
        with:
          name: ${{ needs.compute_parameters.outputs.application }}
          path: ${{ needs.compute_parameters.outputs.application }}/
          
      # Zip application files
      - name: Zip artifact for deployment
        run: zip ${{ needs.compute_parameters.outputs.application }}_{{needs.compute_parameters.outputs.full_version}}.zip ${{ needs.compute_parameters.outputs.application }}/** -r

      # Get release labels
      - name: Define release parameters
        shell: pwsh
        id: compute_parameters
        run: |
          if ('${{ needs.compute_parameters.outputs.pre_release }}' -eq '') {
            echo "release_display_name=${{ needs.compute_parameters.outputs.version }}" >> $Env:GITHUB_OUTPUT
            echo "is_preview=false" >> $Env:GITHUB_OUTPUT
          } else {
            echo "is_preview=true" >> $Env:GITHUB_OUTPUT
            if ('${{ needs.compute_parameters.outputs.pre_release }}'.StartsWith('pre')) {
                echo "release_display_name='${{ needs.compute_parameters.outputs.version }} - Preview'" >> $Env:GITHUB_OUTPUT
            } elseif ('${{ needs.compute_parameters.outputs.pre_release }}'.StartsWith('alpha')) {
                echo "release_display_name='${{ needs.compute_parameters.outputs.version }} - Alpha'" >> $Env:GITHUB_OUTPUT
            } elseif ('${{ needs.compute_parameters.outputs.pre_release }}'.StartsWith('beta')) {
                echo "release_display_name='${{ needs.compute_parameters.outputs.version }} - Beta'" >> $Env:GITHUB_OUTPUT
            }
          }

      # Create release
      - uses: ncipollo/release-action@main # https://github.com/marketplace/actions/create-release
        name: Create Release
        with:
          artifacts: ${{ needs.compute_parameters.outputs.application }}_{{needs.compute_parameters.outputs.full_version}}.zip
          artifactErrorsFailBuild: true
          draft: true
          generateReleaseNotes: false
          token: ${{ github.token }}
          name: ${{ needs.compute_parameters.outputs.application }} ${{ steps.compute_parameters.outputs.release_display_name }}
          prerelease: ${{ steps.compute_parameters.outputs.is_preview }}
          tag: ${{ needs.compute_parameters.outputs.application }}-v${{ steps.compute_parameters.outputs.full_version }}
          body: ${{ steps.changelog.outputs.changes }}